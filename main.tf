terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# Configure the AWS provider

provider "aws" {
  # region                = "eu-west-2"
  region = var.region
  #AWS_ACCESS_KEY_ID     = "AKIA4NKTOPXNHOW5ZNON"
  #AWS_SECRET_ACCESS_KEY = "bf8ED3pmCTE4ZqlkbJKSi4MzoZy/FPecjFS7EnHl"
}

# Define an AWS VPC resource

resource "aws_vpc" "example" {   # aws_vpc is the resource type and example is the name of the resource. example is the friendly name given to the resource.
  count = 2
  cidr_block = "10.0.0.0/16"
  # cidr_block = var.vpc_cidrs[count.index]
  # cidr_block = element(var.vpc_cidrs, count.index) # element function is used to fetch the value from list based on index.eix
  tags = {
    Name = "dev-vpc-0${count.index}" # this is similar to a loop. It will create 2 VPCs with names dev-vpc-00 and dev-vpc-01. 1st time when executed will create 00 then 2nd time when the block is created will create 01
    # ${..} -- sequence is an interpolation, which evaluates the expression inside the {}, and converts it to a string. similar to adding to string togheter or concatenation.
    # Name = var.vpcname -- will pickup the vpcname from variables.tf
    # Name = "dev-vpc-01"
    # "owner" = "john"
  }
}

resource "aws_subnet" "example" {
  # count      = length(var.subnet_Cidrblock)
  # cidr_block = var.subnet_Cidrblock[count.index]
  vpc_id     = aws_vpc.example.id  # id is the attribute and not argument. argument is the input while attribute is the output generated by terraform after creating the resource.
  cidr_block = "10.0.0.0/24"
  # vpc_id     = aws_vpc.example[count.index]  
}

resource "aws_instance" "ec2main" {
  ami           = "ami-0c02fb55956c7d316" #ami for eu-west-2
  instance_type = var.instance_details.size
  tags = {
    Name = var.instance_details.name
  }
}

resource "aws_instance" "ec2main" {
  for_each = var.map_of_objects {
    ami = "ami-0c02fb55956c7d316"
    instance_type = each.value.size
    tags = {
      Name = each.value.name
    }   
  }
}

# Define an AWS Security Group resource using Dynamic Blocks
resource "aws_security_group" "main" {
  name        = "dev-vpc-sg-01"
  vpc_id      = aws_vpc.main.id

  dynamic "ingress" {
    for_each var.ingress_rules 
    content { 
    description      = ingress.value.description
    from_port        = ingress.value.port
    to_port          = ingress.value.port
    protocol         = "tcp"
    cidr_blocks     = ["0.0.0.0/0"]
    }
  }
}

# Data source to fetch Elastic IP from aws console
# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/eip
data "aws_eip" "ec2eip" {  
  filter {                                  # filter block to filter the EIP based on tags if there are multiple EIPs
    name   = "tag:Name"
    values = ["EIP"]
  }
}

resource "aws_instance" "ec2vm" {
  ami           = "ami-0c02fb55956c7d316" #ami for eu-west-2
  instance_type = t2.micro
}

# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eip_association
resource "aws_eip_association" "eip_assoc" {
  instance_id   = aws_instance.ec2vm.id # id is the attribute which is retrived. implicit dependency. once the vm is created only then the eip association will happen.
  allocation_id = data.aws_eip.ec2eip.id # fetching the allocation id from data source. We need to mention the keyword 'data' to refer data source. but in the above sentence we are not mentioning the resource keyword 'resource' while referring resource.
}

# Output Value - Terraform outputs values let you export data about your resource  

# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc

resource "aws_vpc" "main" {               
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "dev-vpc-01"
  }
}

# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc#attribute-reference

output "vpcid" {
  description = "This will output VPC IDs"
  value       = aws_vpc.main.id
}

# Conditional Expressions. Ternary operator are way to express conditional logic in concise way.
resource "aws_instance" "example" {
  instance_type = var.environment == "prod" ? "t2.large" : "t2.micro"
}
